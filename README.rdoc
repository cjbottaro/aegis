= Abstract

Aegis modified to support multiple roles per actors based on context and your data model hierarchy.

This file will only describe the new functionality I added to Aegis.  See the original Aegis README.rdoc here:  http://github.com/makandra/aegis/tree/master

== Description (aka longer abstract)

Aegis is a pretty simple permission system:  a user belongs to a single role, and a role has many permissions associated with it.

My work requires a user to have multiple roles.  Which one is chosen at any given time is based on a context.  For example, we want <tt>user:123</tt> to have role <tt>:writer</tt> in <tt>forum:abc</tt>, but role <tt>:reader</tt> in <tt>forum:xyz</tt>.

Furthermore, we want to have a role hierarchy that follows our object model.  If no role is defined for a user for a given context, then we ask if that context has a parent and if a role is defined there (again for that user).  For example, does <tt>user:123</tt> have a role for <tt>forum:ijk</tt>?  No.  Does <tt>forum:ijk</tt> have a parent?  Yes, it is <tt>account:1</tt>.  Does <tt>user:123</tt> have a role in <tt>account:1</tt>?  Yes, it is <tt>:writer</tt>.

Note that all previous Aegis functionality still exists and works (none of the existing unit tests were changed at all).

== Installation

Add the following to your <tt>Initializer.run</tt> block in your <tt>environment.rb</tt>:
    config.gem 'cjbottaro-aegis', :lib => 'aegis', :source => 'http://gems.github.com'
Then do a 
    sudo rake gems:install

Alternatively, use
    sudo gem sources -a http://gems.github.com
    sudo gem install cjbottaro-aegis

== Database Migration

You need to create a table to keep track of which actors are assigned which roles for each context.

  class CreateRoleAssignments < ActiveRecord::Migration
    def self.up
      create_table :role_assignments do |t|
        t.string  :actor_type,    :null => false
        t.integer :actor_id,      :null => false
        t.string  :role_name,     :null => false
        t.string  :context_type,  :null => false
        t.integer :context_id,    :null => false
        t.timestamps
      end
    end
    
    def self.down
      drop_table :role_assignments
    end
  end

== Example

First, let's define a data model for our example.  An Account has many Users and Forums.  A Forum has many Posts.

  Account
  |-> User
  |-> Forum
      |-> Post

Now let's assign some roles for our user.

  user = User.find_by_name("chris")
  forum = Forum.find_by_name("coping with metrosexuality")
  RoleAssignment.create! :actor     => user,
                         :role_name => :admin,
                         :context   => forum
  post = forum.posts.find_by_title("acceptance")
  RoleAssignment.create! :actor     => user,
                         :role_name => :reader,
                         :context   => post

Now we can query permissions.

  user.may_create_posts_in?(forum) # user has role of :admin in this forum.
  => true
  
  user.may_edit_content_for?(post) # user has role of :reader for this post.
  => false
  
  post = forum.posts.find_by_title("denial")
  user.may_edit_content_for?(post) # user does not have role for this post, so we look at that
                                   # post's parent and see he is a an :admin there.
  => true
  
The syntax is very similar to normal Aegis except you can suffix permission queries with <tt>_in?</tt> or <tt>_for?</tt> and the last argument to the query is the context.  So permission queries that accept parameters work like normal, you just pass in the context as the last parameter.

== How does Aegis know the object model hierarchy?

First way... you specify the hierarchy as a hash where the key is a class name and the value is an association name that invokes the parent.

  class User < ActiveRecord::Base
    has_role :hierarchy => { "Post" => "forum",
                             "Forum" => "account" }
  end

Second way... you specify a single association name that will always return a model's parent.

  class User < ActiveRecord::Base
    has_role :hierarchy_accessor => "parent"
  end
  
  class Post < ActiveRecord::Base
    belongs_to :forum
    def parent
      forum
    end
  end
  
  class Forum < ActiveRecord::Base
    belongs_to :account
    def parent
      account
    end
  end

== Forcing certain roles under specific conditions

My work had an additional requirement that if User#is_admin? is true, then that user should always have the role of <tt>:superuser</tt>, regardless of the context.

  class User < ActiveRecord::Base
    has_role :force_superuser_if => Proc.new{ |user| user.is_admin? }
  end
  
  user = User.first(:conditions => { :is_admin => true })
  user.role_in(anything)
  => :superuser
  
  user.may_edit_content_for?(anything)
  => true

The format of the key is special.  It must be of the form <tt>force_<role_name>_if</tt>.  There can be multiple keys of this form.  The role is determined by the first one who's Proc returns true.  They are evaluated in random order (thus is the nature of Hashes).

== Optimizations

We don't want to read the role assignments from the database every time we do a permission check.  The solution to this is to read them once when the user logs in, store it in the session, then load from the session on each request.

In your login controller/action...

  if successful_login?
    session[:permissions] = current_user.role_assignments_hash
  else
    ...
  end

In your controller/action that checks if a user is logged in...

  if logged_in?
    current_user.role_assignments_override = session[:permissions]
  else
    ...
  end
    
This way the role assignments are only read when a user logs in.

== Caveats and TODOs

Roles are associated with contexts, but permissions are not.  For example, this can happen.

  Permissions < Aegis::Permissions
    permission :delete_forum do
      allow :admin
    end
  end
  
  user = User.find_by_name("chris")
  
  user.role_in(user.account)
  => :reader
    
  user.may_delete_forum_in?(user.account)
  => false
  
  post = Post.find_by_name("some stupid post")
  
  user.role_in(post)
  => :admin
  
  user.may_delete_forum_in?(post)
  => true
  
Arguably that is programmer error.  You should know better than to pass in an incorrect context to a permission check.

It would be nice to associate permissions with contexts like such.

  Permissions < Aegis::Permissions
    permission :delete_forum do
      context "Account" # Alternatively, contexts "C1", "C2", ...
      allow :admin
    end
  end
  
  user.may_delete_forum_in?(some_post)
  => Exception, permission :delete_forum does not make sense in the context of a Post

I'll probably add this functionality soon.

=== Author

Christopher J. Bottaro
http://github.com/cjbottaro